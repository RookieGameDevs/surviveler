// This file has been generated by "go-gencon"; DO NOT EDIT
// command: "go-gencon -type Entity -cont Set -name EntitySet"
// Go Generic Containers
// For more information see http://github.com/aurelien-rainone/go-gencon

package game

type EntitySet struct {
	set map[Entity]struct{}
}

// NewEntitySet initializes and returns a new set of Entity
func NewEntitySet() *EntitySet {
	return &EntitySet{make(map[Entity]struct{})}
}

// Len returns the set length
func (s *EntitySet) Len() int {
	return len(s.set)
}

// Add adds a new element to the set
func (s *EntitySet) Add(i Entity) {
	s.set[i] = struct{}{}
}

// Contains returns true if element is contained in the set
func (s *EntitySet) Contains(i Entity) bool {
	_, found := s.set[i]
	return found
}

// Remove removes an element from the set
func (s *EntitySet) Remove(i Entity) {
	delete(s.set, i)
}

// Each runs a function for each element.
//
// If f() returns null, Each stops the iteration immeditely
func (s EntitySet) Each(f func(Entity) bool) {
	for i, _ := range s.set {
		if !f(i) {
			return
		}
	}
}

// Union adds all element from another set
func (s *EntitySet) Union(other *EntitySet) {
	for i, _ := range other.set {
		s.set[i] = struct{}{}
	}
}
