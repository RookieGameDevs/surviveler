// This file has been generated by "go-gencon"; DO NOT EDIT
// command: "go-gencon -type Event -cont LockFreeQueue -name EventQueue"
// Go Generic Containers
// For more information see http://github.com/aurelien-rainone/go-gencon

package events

import (
	"sync/atomic"
	"unsafe"
)

// private structure
type node struct {
	value *Event
	next  *node
}

type EventQueue struct {
	dummy *node
	tail  *node
}

// NewEventQueue creates a new lock free queue of Event
func NewEventQueue() *EventQueue {

	q := new(EventQueue)
	q.dummy = new(node)
	q.tail = q.dummy

	return q
}

// Enqueue places a new element at the back of the queue.
//
// This method is safe for concurrent use by multiple goroutines
func (q *EventQueue) Enqueue(v *Event) {
	var oldTail, oldTailNext *node

	newNode := new(node)
	newNode.value = v

	newNodeAdded := false

	for !newNodeAdded {
		oldTail = q.tail
		oldTailNext = oldTail.next

		if q.tail != oldTail {
			continue
		}

		if oldTailNext != nil {
			atomic.CompareAndSwapPointer((*unsafe.Pointer)(unsafe.Pointer(&q.tail)), unsafe.Pointer(oldTail), unsafe.Pointer(oldTailNext))
			continue
		}

		newNodeAdded = atomic.CompareAndSwapPointer((*unsafe.Pointer)(unsafe.Pointer(&oldTail.next)), unsafe.Pointer(oldTailNext), unsafe.Pointer(newNode))
	}

	atomic.CompareAndSwapPointer((*unsafe.Pointer)(unsafe.Pointer(&q.tail)), unsafe.Pointer(oldTail), unsafe.Pointer(newNode))
}

// Dequeue dequeues the front element of the queue
//
// This method is safe for concurrent use by multiple goroutines
func (q *EventQueue) Dequeue() (*Event, bool) {
	var (
		temp              *Event
		oldDummy, oldHead *node
	)

	removed := false

	for !removed {
		oldDummy = q.dummy
		oldHead = oldDummy.next
		oldTail := q.tail

		if q.dummy != oldDummy {
			continue
		}

		if oldHead == nil {
			return nil, false
		}

		if oldTail == oldDummy {
			atomic.CompareAndSwapPointer((*unsafe.Pointer)(unsafe.Pointer(&q.tail)), unsafe.Pointer(oldTail), unsafe.Pointer(oldHead))
			continue
		}

		temp = oldHead.value
		removed = atomic.CompareAndSwapPointer((*unsafe.Pointer)(unsafe.Pointer(&q.dummy)), unsafe.Pointer(oldDummy), unsafe.Pointer(oldHead))
	}

	return temp, true
}

func (q *EventQueue) Iterate() <-chan *Event {
	c := make(chan *Event)
	go func() {
		for {
			item, ok := q.Dequeue()
			if !ok {
				break
			}

			c <- item
		}
		close(c)
	}()

	return c
}
