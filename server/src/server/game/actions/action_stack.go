// This file has been generated by "go-gencon"; DO NOT EDIT
// command: "go-gencon -type Action -cont Stack -name Stack"
// Go Generic Containers
// For more information see http://github.com/aurelien-rainone/go-gencon

package actions

// Stack represents a stack of Action.
type Stack struct {
	top  *item
	size int
}

// internal item structure
type item struct {
	value *Action
	next  *item
}

// NewStack initializes and returns a new stack of Action
func NewStack() *Stack {

	return &Stack{}
}

// Len returns the stack's length
func (s *Stack) Len() int {
	return s.size
}

// Push pushes a new item on top of the stack
func (s *Stack) Push(value *Action) {
	s.top = &item{value, s.top}
	s.size++
}

// Pop removes the topmost item from the stack and return its value
//
// If the stack is empty, Pop returns nil
func (s *Stack) Pop() (value *Action) {
	if s.size > 0 {
		value, s.top = s.top.value, s.top.next
		s.size--
		return
	}
	return nil
}

// PopLast removes the bottommost item.
//
// PopLast does nothing if the stack does not contain at least 2 items.
func (s *Stack) PopLast() (value *Action) {
	if lastElem := s.popLast(s.top); s.size >= 2 && lastElem != nil {
		return lastElem.value
	}
	return nil
}

// Peek returns the topmost item without removing it from the stack
func (s *Stack) Peek() (value *Action, exists bool) {
	exists = false
	if s.size > 0 {
		value = s.top.value
		exists = true
	}
	return
}

// PeekN returns at max the N topmost item without removing them from the stack
func (s *Stack) PeekN(n int) []*Action {
	var (
		N   []*Action
		cur *item
	)
	N = make([]*Action, 0, n)
	cur = s.top
	for len(N) < n {
		if cur == nil {
			break
		}
		N = append(N, cur.value)
		cur = cur.next
	}
	return N
}

func (s *Stack) popLast(elem *item) *item {
	if elem == nil {
		return nil
	}
	// not last because it has next and a grandchild
	if elem.next != nil && elem.next.next != nil {
		return s.popLast(elem.next)
	}

	// current elem is second from bottom, as next elem has no child
	if elem.next != nil && elem.next.next == nil {
		last := elem.next
		// make current elem bottom of stack by removing its next item
		elem.next = nil
		s.size--
		return last
	}
	return nil
}
